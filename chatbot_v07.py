# -*- coding: utf-8 -*-
"""Chatbot_v0.4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12T9RNoe6HTIs44tACWeJ0uSYRpl3kgVa
"""
# pylint: disable=W0621

import os
import pickle
import json
import numpy as np
# from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense, Embedding, GlobalAveragePooling1D
from keras.preprocessing.text import Tokenizer
from keras.utils import pad_sequences
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split

txt_files = [f for f in os.listdir('.') if f.endswith('.json')]
if 'final.json' in txt_files :
    os.remove('final.json')
    txt_files.remove('final.json')

total='{ "categories": [\n'
for f in txt_files :
    with open(f, encoding='utf-8') as files :
        total += files.read()
total=total.replace("}{","}, \n{")
total +="\n]}"
print(total)

with open('final.json','w', encoding='utf-8') as file:
    file.write(total)
with open('final.json', encoding='utf-8') as file:
    data = json.load(file)

training_sentences = []
training_labels = []
labels = []
responses = []

for categorie in data['categories']:
    for intent in categorie['intents'] :
        for pattern in intent['patterns']:
            training_sentences.append(pattern)
            training_labels.append(intent['tag'])
        responses.append(intent['responses'])
        
        if intent['tag'] not in labels:
            labels.append(intent['tag'])
          
num_classes = len(labels)

lbl_encoder = LabelEncoder()
lbl_encoder.fit(training_labels)
training_labels = lbl_encoder.transform(training_labels)

vocab_size = 1000
embedding_dim = 16
max_len = 20
oov_token = "<OOV>"

tokenizer = Tokenizer(num_words=vocab_size, oov_token=oov_token)
tokenizer.fit_on_texts(training_sentences)
word_index = tokenizer.word_index
sequences = tokenizer.texts_to_sequences(training_sentences)
padded_sequences = pad_sequences(sequences, truncating='post', maxlen=max_len)

model = Sequential()
model.add(Embedding(vocab_size, embedding_dim, input_length=max_len))
model.add(GlobalAveragePooling1D())
model.add(Dense(16, activation='relu'))
model.add(Dense(16, activation='relu'))
model.add(Dense(num_classes, activation='softmax'))

model.compile(loss='sparse_categorical_crossentropy', 
              optimizer='adam', metrics=['accuracy'])

model.summary()

X_train, X_test, y_train, y_test = train_test_split(padded_sequences\
, np.array(training_labels) , test_size=0.2, random_state=42)

epochs = 500
history = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=epochs)

model.save("chat_model")


# to save the fitted tokenizer
with open('tokenizer.pickle', 'wb') as handle:
    pickle.dump(tokenizer, handle, protocol=pickle.HIGHEST_PROTOCOL)
    
# to save the fitted label encoder
with open('label_encoder.pickle', 'wb') as ecn_file:
    pickle.dump(lbl_encoder, ecn_file, protocol=pickle.HIGHEST_PROTOCOL)
